/* esp32-firmware
 * Copyright (C) 2020-2021 Erik Fleckstein <erik@tinkerforge.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#include <Arduino.h>
#include <WiFi.h>

#include <stdio.h>
#include <string.h>

#include "index.html.h"
{{{module_includes}}}

#include "api.h"
#include "event_log.h"
#include "task_scheduler.h"
#include "web_server.h"
#include "build.h"

const char* DISPLAY_NAME = "{{{display_name}}}";

WebServer server;

EventLog logger;

TaskScheduler task_scheduler;
API api;

{{{module_decls}}}

// declared and initialized by board module
extern TF_HAL hal;
// initialized by board module
uint32_t uid_numeric = 0;
char uid[7] = {0};
char passphrase[20] = {0};
int8_t blue_led_pin = -1;
int8_t green_led_pin = -1;
int8_t button_pin = -1;
// filled by board module
bool factory_reset_requested = false;

Config version;
Config modules;
Config reboot;

bool firmware_update_allowed = true;

WebServerHandler *main_page_handler;

void register_default_urls() {
    main_page_handler = server.on("/", HTTP_GET, [](WebServerRequest req) {
        req.addResponseHeader("Content-Encoding", "gzip");
        req.addResponseHeader("ETag", BUILD_TIMESTAMP_HEX_STR);
        req.addResponseHeader("X-Clacks-Overhead", "GNU Terry Pratchett");
        req.send(200, "text/html", index_html_gz, index_html_gz_len);
    });

    reboot = Config::Null();
    api.addCommand("reboot", &reboot, {}, []() {
        ESP.restart();
    }, true);

    api.addState("version", &version, {}, 10000);
    api.addState("modules", &modules, {}, 10000);

    server.on("/force_reboot", HTTP_GET, [](WebServerRequest request) {
        ESP.restart();
        request.send(200, "text/html", "Forced reboot.");
    });

    server.on("/uptime", HTTP_GET, [](WebServerRequest request) {
        request.send(200, "text/html", String(millis()).c_str());
    });

    //This is a hack to allow running without the authentication module. Remove after 1.3 beta
    server.on("/login_state", HTTP_GET, [](WebServerRequest request) {
        request.send(200, "text/plain", "Logged in");
    });

    api.registerDebugUrl(&server);
}

void setup(void) {
    Serial.begin(115200);

    logger.printfln("    **** TINKERFORGE {{{display_name_upper}}} V" BUILD_VERSION_FULL_STR " ****");
    logger.printfln("         %dK RAM SYSTEM   %d HEAP BYTES FREE", ESP.getHeapSize() / 1024, ESP.getFreeHeap());
    logger.printfln("READY.");

    if(!mount_or_format_spiffs()) {
        logger.printfln("Failed to mount SPIFFS.");
    }

    String config_version = read_or_write_config_version(BUILD_VERSION_FULL_STR);

    logger.printfln("{{{display_name}}} configuration version %s", config_version.c_str());

    version = Config::Object({
        {"firmware", Config::Str(BUILD_VERSION_FULL_STR)},
        {"spiffs", Config::Str(config_version)},
    });

    api.setup();
    task_scheduler.setup();

    {{{module_setup}}}

    modules = Config::Object({
        // Fake that the event_log is a module for now.
        {"event_log", Config::Bool(true)},
        {{{module_init_config}}}
    });

    server.start();

    register_default_urls();
    logger.register_urls();
    task_scheduler.register_urls();

    {{{module_register_urls}}}
}

void loop(void) {
    /* //prioritize proxy performance over web interface and wifi responsitivity */
    /* tf_hal_tick(&hal, 1000); */
    /* tf_hal_tick(&hal, 1000); */
    /* tf_hal_tick(&hal, 1000); */
    /* tf_hal_tick(&hal, 1000); */
    /* tf_hal_tick(&hal, 1000); */
    /* tf_hal_tick(&hal, 1000); */
    /* tf_hal_tick(&hal, 1000); */
    /* tf_hal_tick(&hal, 1000); */

    task_scheduler.loop();
    api.loop();

    {{{module_loop}}}
}
